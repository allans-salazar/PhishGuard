-- MODULES a provider can sell
CREATE TABLE modules (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR2(200) NOT NULL,
  description VARCHAR2(2000),
  price NUMBER DEFAULT 0 NOT NULL,
  created_by NUMBER NOT NULL REFERENCES users(id),
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- SCENARIOS inside a module
CREATE TABLE scenarios (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  module_id NUMBER NOT NULL REFERENCES modules(id) ON DELETE CASCADE,
  channel VARCHAR2(50) NOT NULL,         -- e.g., EMAIL, SMS, WEB
  prompt VARCHAR2(2000) NOT NULL,
  correct_choice NUMBER NOT NULL,         -- 0 or 1 for simple true/false
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- PURCHASES (who bought which module)
CREATE TABLE purchases (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL REFERENCES users(id),
  module_id NUMBER NOT NULL REFERENCES modules(id),
  purchased_at TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT uq_purchase UNIQUE(user_id, module_id)
);

-- TRANSACTIONS (wallet ledger)
CREATE TABLE transactions (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL REFERENCES users(id),
  amount NUMBER NOT NULL,                 -- + for topup, - for purchase
  type VARCHAR2(20) NOT NULL,             -- 'TOPUP' or 'PURCHASE'
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- TRAINING ATTEMPTS
CREATE TABLE attempts (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id NUMBER NOT NULL REFERENCES users(id),
  scenario_id NUMBER NOT NULL REFERENCES scenarios(id),
  user_choice NUMBER NOT NULL,
  is_correct NUMBER(1) NOT NULL,
  attempted_at TIMESTAMP DEFAULT SYSTIMESTAMP
);

COMMIT;